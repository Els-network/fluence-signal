/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.3-318
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface AuthDef {
    create: (username: string, callParams: CallParams<'username'>) => boolean | Promise<boolean>;
    get_pub_key: (callParams: CallParams<null>) => string | Promise<string>;
    receive_handshake: (prologue: number[], callParams: CallParams<'prologue'>) => number[] | Promise<number[]>;
    send_handshake: (peer: string, public_key: string, callParams: CallParams<'peer' | 'public_key'>) => number[] | Promise<number[]>;
    sign: (data: number[], callParams: CallParams<'data'>) => { error: string | null; signature: number[] | null; success: boolean; } | Promise<{ error: string | null; signature: number[] | null; success: boolean; }>;
    verify: (signature: number[], data: number[], callParams: CallParams<'signature' | 'data'>) => boolean | Promise<boolean>;
}
export function registerAuth(service: AuthDef): void;
export function registerAuth(serviceId: string, service: AuthDef): void;
export function registerAuth(peer: FluencePeer, service: AuthDef): void;
export function registerAuth(peer: FluencePeer, serviceId: string, service: AuthDef): void;
       

export function registerAuth(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "custom_sig",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "create" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "username" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "get_pub_key" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "receive_handshake" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "prologue" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    ]
                }
            },
            "send_handshake" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    ]
                }
            },
            "sign" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "data" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "SignResult",
                            "fields" : {
                                "error" : {
                                    "tag" : "option",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                },
                                "signature" : {
                                    "tag" : "option",
                                    "type" : {
                                        "tag" : "array",
                                        "type" : {
                                            "tag" : "scalar",
                                            "name" : "u8"
                                        }
                                    }
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            },
            "verify" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "signature" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        },
                        "data" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function handshake(
    peer_: string,
    config?: {ttl?: number}
): Promise<void>;

export function handshake(
    peer: FluencePeer,
    peer_: string,
    config?: {ttl?: number}
): Promise<void>;

export function handshake(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (xor
                           (seq
                            (call peer ("custom_sig" "get_pub_key") [] public_key)
                            (call -relay- ("op" "noop") [])
                           )
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                          )
                         )
                         (call %init_peer_id% ("custom_sig" "send_handshake") [peer public_key] prologue)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer ("custom_sig" "receive_handshake") [prologue] reply)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                      )
                      (call %init_peer_id% ("custom_sig" "receive_handshake") [reply])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "handshake",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
